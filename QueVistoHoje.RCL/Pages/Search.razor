@page "/search"

<<<<<<< HEAD
@using QueVistoHoje.RCL.Data
@using QueVistoHoje.RCL.Data.Entities

@inject HttpClient Http
@inject APIService APIService
=======
@using QueVistoHoje.RCL.Data.Entities
@inject HttpClient Http
>>>>>>> 817da96e6c7472d81c14db231778c170d33ecb80

<div class="search-container">
    <input type="text" class="search-bar" @bind="searchQuery" placeholder="Search...">
    <button class="search-button" @onclick="SearchProducts">Search</button>
</div>

<div class="product-grid">
    @if (produtos != null && produtos.Count > 0)
    {
        @foreach (var produto in produtos)
        {
            <a href="product/@produto.Id" class="product-link">
                <div class="product">
                    <img src="@produto.Imagem" class="product-image" />
                    <div class="product-info">
                        <div class="product-value">@produto.Preco €</div>
                        <div class="product-name">@produto.Nome</div>
                    </div>
                </div>
            </a>
        }
    }
</div>

@code {
    private string searchQuery = string.Empty;
    private List<Produto> produtos = new List<Produto>();
<<<<<<< HEAD
    private string URL = APIService.Link + "/api/produtos/search?query=";

=======
>>>>>>> 817da96e6c7472d81c14db231778c170d33ecb80

    private async Task SearchProducts()
    {
        if (!string.IsNullOrEmpty(searchQuery))
        {
            try
            {
<<<<<<< HEAD
                var searchUrl = $"{URL}{searchQuery}";
=======
                var searchUrl = $"https://d3q8hwmm-7119.uks1.devtunnels.ms/api/produtos/search?query={searchQuery}";
>>>>>>> 817da96e6c7472d81c14db231778c170d33ecb80
                produtos = await Http.GetFromJsonAsync<List<Produto>>(searchUrl);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error fetching produtos: {ex.Message}");
            }
        }
    }
}
