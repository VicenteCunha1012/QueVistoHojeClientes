@page "/login"

@using QueVistoHoje.RCL.Data

@inject HttpClient Http
@inject NavigationManager Navigation
@inject UserService UserService


<div class="login-container">
    <div class="login-form">
        <h1 class="login-title">QueVistoHoje</h1>
        <div class="input-group">
            <label for="email">Email:</label>
            <input type="email" id="email" @bind="email" class="login-input" placeholder="Introduza o seu email" />
        </div>
        <div class="input-group">
            <label for="password">Palavra-passe:</label>
            <input type="password" id="password" @bind="password" class="login-input" placeholder="Introduza a sua palavra-passe" />
        </div>
        <button class="login-button" @onclick="Log_in">Login</button>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <p class="error-message">@errorMessage</p>
        }
    </div>
</div>

@code {
    private string email = string.Empty;
    private string password = string.Empty;
    private string errorMessage = string.Empty;

<<<<<<< HEAD
    private string URL = APIService.Link + "/api/auth/login";

=======
>>>>>>> 817da96e6c7472d81c14db231778c170d33ecb80
    private async Task Log_in()
    {
        if (string.IsNullOrWhiteSpace(email) || string.IsNullOrWhiteSpace(password))
        {
            errorMessage = "Por favor preencha todos os campos";
            return;
        }

        try
        {
            var base64Credentials = Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes($"{email}:{password}"));
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Basic", base64Credentials);

<<<<<<< HEAD
            var response = await Http.PostAsync(URL, null);
=======
            var response = await Http.PostAsync("https://d3q8hwmm-7119.uks1.devtunnels.ms/api/auth/login", null);
>>>>>>> 817da96e6c7472d81c14db231778c170d33ecb80

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
                if (result != null)
                {

                    UserService.SetUserData(email, result.Token);
                    Navigation.NavigateTo("/");
                }
            }
            else
            {
                var error = await response.Content.ReadFromJsonAsync<ApiError>();
                errorMessage = error?.Message ?? "Invalid login credentials.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred. Please try again.";
            Console.WriteLine($"Login error: {ex.Message}");
        }
    }

    private class LoginResponse
    {
        public string Token { get; set; } = string.Empty;
        public DateTime Expiration { get; set; }
    }

    private class ApiError
    {
        public string Message { get; set; } = string.Empty;
    }
}

